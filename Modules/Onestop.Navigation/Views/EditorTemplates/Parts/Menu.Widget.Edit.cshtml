@model Onestop.Navigation.ViewModels.MenuWidgetViewModel
@{
    Script.Require("ShapesBase");

}
<fieldset>
    <legend>@T("Menu settings")</legend>
    <div>

        @Html.LabelFor(m => m.Mode, T("Menu display mode"))
        <select id="@Html.FieldIdFor(m => m.Mode)" name="@Html.FieldNameFor(m => m.Mode)">
            @foreach (var mode in Model.Modes)
            {
                @Html.SelectOption(Model.Mode, mode, mode.ToString())
            }
        </select>
        <span class="hint">@T("Choose display mode")</span>
    </div>
    <div>
        @Html.LabelFor(m => m.CurrentMenuId, T("For Menu"))
        <select id="@Html.FieldIdFor(m => m.CurrentMenuId)" name="@Html.FieldNameFor(m => m.CurrentMenuId)">
            @foreach (var menu in Model.Menus)
            {
                @Html.SelectOption(Model.CurrentMenuId, menu.Id, Html.ItemDisplayText(menu).ToString())
            }
        </select>
        <span class="hint">@T("Select which menu you want to display")</span>
    </div>
    <div>
        @Html.LabelFor(m => m.RootNode, T("The root node to display children for"))
        @Html.EditorFor(m => m.RootNode)
        @Html.ValidationMessageFor(m => m.RootNode, "*")
        <span class="hint">
            @T("The dot-notated position of desired menu item. Leave empty for whole menu.")
        </span>
    </div>
    <div>
        @Html.LabelFor(m => m.Levels, T("Limit levels"))
        @Html.EditorFor(m => m.Levels)
        @Html.ValidationMessageFor(m => m.Levels, "*")
        <span class="hint">
            @T("Limit the number of levels displayed. 0 = unlimited.")
        </span>
    </div>
    <div>
        @Html.EditorFor(m => m.CutOrFlattenLower)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.CutOrFlattenLower)">@T("Cut lower levels?")</label>
        <span class="hint">
            @T("Check if you want to cut down items below limit.")
            @T("Leave unchecked if you want to flatten lower levels to single list.")
        </span>
    </div>
    <div>
        @Html.EditorFor(m => m.WrapChildrenInDivs)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.WrapChildrenInDivs)">@T("Wrap children in &lt;div&gt; tags?")</label>
        <span class="hint">
            @T("Check if you want to add additional &lt;div&gt; wrappers around child &lt;ul&gt; lists.")
        </span>
    </div>
</fieldset>
