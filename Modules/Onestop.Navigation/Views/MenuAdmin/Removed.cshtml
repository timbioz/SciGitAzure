@using Onestop.Navigation.Models
@using Onestop.Navigation.ViewModels
@using Orchard.ContentManagement
@using Orchard.ContentManagement.Aspects
@using Orchard.Core.Common.Models
@using Orchard.Core.Navigation.Models
@using Orchard.Utility.Extensions
@model MenuAdminRemovedViewModel
@{
    Layout.Title = T("Items removed in '{0}' menu", Model.Menu.As<ITitleAspect>().Title, Model.VersionNumber).ToString();
    Script.Require("MenuAdminScripts");
    Style.Require("MenuAdmin");

}
<table id="itemsheader" 
    class="items" 
    summary="@T("This is a table of items in this menu")">
</table>
<fieldset>
    <legend>↓ @T("Removed items")</legend>
    <div id="deleted-items">
        @DisplayItems(null, Model.Items.Select(i => i.As<ExtendedMenuItemPart>()).ToList(), "no-nest gray")
    </div>
</fieldset>
@Html.AntiForgeryTokenOrchard()
@helper DisplayItems(ExtendedMenuItemPart parent, IList<ExtendedMenuItemPart> items, string additionalClasses)
    {
    <ol class="itemlist @(parent == null ? "sortable" : "") @(additionalClasses)">
        @*Items should be nested and displayed by recurrence or a flat list with filtering *@
        @foreach (var item in items)
        {
            <li class="item @(additionalClasses)">
                <div class="wrapper">
                    <div class="header item-(@item.ContentItem.ContentType.ToSafeName())">
                        <span class="description">@Html.ItemAdminLink(T(item.Text).Text, item)&nbsp;|&nbsp;@item.ContentItem.TypeDefinition.DisplayName</span>
@*                        @if (!string.IsNullOrWhiteSpace(item.SubTitle))
                        {
                            <h6>
                                <i>@item.SubTitle</i></h6>
                        }*@
                    </div>
                    <span class="url">
                        @if (item.Is<ContentMenuItemPart>())
                        {
                            if (item.As<ContentMenuItemPart>().Content != null)
                            {
                                @Html.ItemDisplayLink(item.As<ContentMenuItemPart>().Content)
                            }
                            else
                            {
                                <i>Not set</i>
                            }
                        }
                        else if(item.Is<MenuItemPart>()){
                            @T(item.Url)
                        }
                        else{
                            <i>Not applicable</i>
                        }
                    </span><span class="status">
                        @T("Modified: ") <i>@(item.As<CommonPart>().ModifiedUtc.HasValue ? (IHtmlString)Display.DateTimeRelative(dateTimeUtc: item.As<CommonPart>().ModifiedUtc) : T("never"))</i>
                        @if (item.Is<IVersionAspect>() && item.As<IVersionAspect>().Author != null)
                        {
                            @T("by <i>{0}</i>", item.As<IVersionAspect>().Author.UserName)
                        }
                    </span><span class="actions">
                        @Html.Link(T("Restore as draft").Text, Url.Action("UndeleteItem", "MenuAdmin", new { area = "Onestop.Navigation", menuId = Model.Menu.Id, versionId = item.ContentItem.VersionRecord.Id, newVersion = true }), new { itemprop = "UnsafeUrl", @class = "btn btn-small btn-success" })
                    </span>
                </div>
            </li>
        }
    </ol>
}