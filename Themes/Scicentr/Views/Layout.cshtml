@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");
    SetMeta("viewport", "width=device-width, initial-scale=1, maximum-scale=1");
    //Style.Include("bootstrap.css"); // standard style sheet
    Style.Include("bootstrap.min.css"); // minified style sheet
    Style.Include("960grid-24col.css");
    //Style.Include("bootstrap-nogrid.css");
    //Style.Include("bootstrap-responsive.css"); // standard responsive style sheet
    //Style.Include("bootstrap-responsive.min.css"); // minified responsive style sheet
    //Style.Include("less/bootstrapless.less"); // LESS implementation *Requires DOTLESS module
    Style.Include("site.css"); // theme specific standard style sheet
    Style.Include("Style.css");

    Script.Require("jQuery").AtFoot();
    //Script.Include("bootstrap.js"); // standard javascript file
    Script.Include("bootstrap.min.js").AtFoot(); // minified javascript file

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Navigation.Add(New.Slogan(), "0"); // Site name and link to the home page
    WorkContext.Layout.Header.Add(New.Branding(), "5");
    //WorkContext.Layout.Footer.Add(New.BadgeOfHonor(), "5"); // Powered by Orchard
    WorkContext.Layout.Navigation.Add(New.UserLinks(), "5"); // Login and dashboard links
    //WorkContext.Layout.Navigation.Add(New.SearchNav(), "10"); // Search box (requires Search module)




    if (WorkContext.CurrentUser == null)
    {
        WorkContext.Layout.Hidden.Add(New.LogonDialog(), "0");
    }

    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model

    string contentAreaClass = (HasText(asideClass) ? asideClass == "aside-1" || asideClass == "aside-2" ? "grid_16" : asideClass == "aside-12" ? "grid_8" : "grid_24" : "");
    
}
@tag.StartElement
@if (Model.Navigation != null)
{
    <!--start: Navigation -->
    <div id="layout-navigation" class="navbar navbar-inverse">
        <div class="navbar-inner">
            <div class="container-fluid">
                @*<a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </a>*@
                <div class="navbar" style="min-width: 911px">
                    @Zone(Model.Navigation)
                </div>
            </div>
        </div>
    </div>
    <!--end: Navigation -->
}
<!-- Blue Stripe for Heder - Position: absolute -->
<div class="color-back"></div>
<!--start: Container -->
<div class="container_24">
    @if (Model.Header != null)
    {
        <header id="layout-header">
            @Zone(Model.Header)
        </header>
    }
    <!--start: Double Menu Block -->
    @if (Model.FirstMenu != null)
    {
        <div id="first-menu" class="alpha grid_24">
            @Zone(Model.FirstMenu)
        </div>
    }
    @if (Model.SecondMenu != null)
    {
        <div id="second-menu" class="alpha grid_24">
            @Zone(Model.SecondMenu)
        </div>
    }
    <!--end: Double Menu Block -->
    @if (Model.Featured != null)
    {
        <div id="layout-featured">
            @Zone(Model.Featured)
        </div>
        <!-- end: Hero Unit -->
    }
    @if (Model.BeforeMain != null)
    {
        <div id="layout-before-main">
            @Zone(Model.BeforeMain)
        </div>
        <hr />
    }
    @if (Model.AsideFirst != null)
    {
        <div class="aside-first grid_8">
            @Zone(Model.AsideFirst)
        </div>
    }
    <div class="alpha @(HasText(asideClass) ? asideClass == "aside-1" || asideClass == "aside-2" ? "grid_16" : asideClass == "aside-12" ? "grid_8" : "grid_24" : "")">
        @if (Model.Messages != null)
        {
            <div>
                @Zone(Model.Messages)
            </div>
        }
        @if (Model.BeforeContent != null)
        {
            <div>
                @Zone(Model.BeforeContent)
            </div>
        }
        @if (Model.Content != null)
        {
            <div class="alpha @if (contentAreaClass == "grid_16" & Model.ContentRight != null)
                              {
                                      @:grid_12
                                  }
                              else if (contentAreaClass == "grid_16" & Model.ContentRight == null)
                              {
                                      @:grid_16
                                  }
                              else
                              {
                                      @:grid_24
                                  }">
                @Zone(Model.Content)
            </div>
                              if (Model.ContentRight != null)
                              {
            <div class="omega grid_4">
                @Zone(Model.ContentRight)
            </div>
                              }
            <div class="clear"></div>
       
        }
        @if (Model.AfterContent != null)
        {
            <div>
                @Zone(Model.AfterContent)
            </div>
        }
    </div>
    @if (Model.AsideSecond != null)
    {
        <div class="aside-second omega grid_8">
            @Zone(Model.AsideSecond)
        </div>
    }
    <div class="clearfix"></div>
    @if (Model.AfterMain != null)
    {
        <div>
            @Zone(Model.AfterMain)
        </div>
        <hr />
    }
    @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
    {
        <div id="layout-tripel-container">
            @if (Model.TripelFirst != null)
            {
                <!-- start: Tripel -->
                <div class="@(HasText(tripelClass) ? tripelClass == "tripel-12" || tripelClass == "tripel-23" || tripelClass == "tripel-13" ? "grid_12" : tripelClass == "tripel-123" ? "grid_8" : "grid_24" : "")">
                    @Zone(Model.TripelFirst)
                </div>
                <!-- end: Tripel -->
            }
            @if (Model.TripelSecond != null)
            {
                <!-- start: Tripel -->
                <div class="@(HasText(tripelClass) ? tripelClass == "tripel-12" || tripelClass == "tripel-23" || tripelClass == "tripel-13" ? "grid_12" : tripelClass == "tripel-123" ? "grid_8" : "grid_24" : "")">
                    @Zone(Model.TripelSecond)
                </div>
                <!-- end: Tripel -->
            }
            @if (Model.TripelThird != null)
            {
                <!-- start: Tripel -->
                <div class="@(HasText(tripelClass) ? tripelClass == "tripel-12" || tripelClass == "tripel-23" || tripelClass == "tripel-13" ? "grid_12" : tripelClass == "tripel-123" ? "grid_8" : "grid_24" : "")">
                    @Zone(Model.TripelThird)
                </div>
                <!-- end: Tripel -->
            }
        </div>
        <hr />
    }
</div>
<div id="push"></div>
<!--end: Container-->
@tag.EndElement
<!-- start: Footer -->
<footer id="footer">
    @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
    {
        <div class="container_24">
            @if (Model.FooterQuadFirst != null)
            {
                <div class="alpha @(HasText(footerQuadClass) ? footerQuadClass == "split-1" || footerQuadClass == "split-2" || footerQuadClass == "split-3" || footerQuadClass == "split-4" ? "grid_24" : footerQuadClass == "split-12" || footerQuadClass == "split-13" || footerQuadClass == "split-14" || footerQuadClass == "split-23" || footerQuadClass == "split-24" || footerQuadClass == "split-34" ? "grid_12" : footerQuadClass == "split-123" || footerQuadClass == "split-124" || footerQuadClass == "split-134" || footerQuadClass == "split-234" ? "grid_8" : "grid_6" : "")">
                    @Zone(Model.FooterQuadFirst)
                </div>
            }
            @if (Model.FooterQuadSecond != null)
            {
                <div class="@(HasText(footerQuadClass) ? footerQuadClass == "split-1" || footerQuadClass == "split-2" || footerQuadClass == "split-3" || footerQuadClass == "split-4" ? "grid_24" : footerQuadClass == "split-12" || footerQuadClass == "split-13" || footerQuadClass == "split-14" || footerQuadClass == "split-23" || footerQuadClass == "split-24" || footerQuadClass == "split-34" ? "omega grid_12" : footerQuadClass == "split-123" || footerQuadClass == "split-124" || footerQuadClass == "split-134" || footerQuadClass == "split-234" ? "grid_8" : "grid_6" : "")">
                    @Zone(Model.FooterQuadSecond)
                </div>
            }
            @if (Model.FooterQuadThird != null)
            {
                <div class="@(HasText(footerQuadClass) ? footerQuadClass == "split-1" || footerQuadClass == "split-2" || footerQuadClass == "split-3" || footerQuadClass == "split-4" ? "grid_24" : footerQuadClass == "split-12" || footerQuadClass == "split-13" || footerQuadClass == "split-14" || footerQuadClass == "split-23" || footerQuadClass == "split-24" || footerQuadClass == "split-34" ? "grid_12" : footerQuadClass == "split-123" || footerQuadClass == "split-124" || footerQuadClass == "split-134" || footerQuadClass == "split-234" ? "omega grid_8" : "grid_6" : "")">
                    @Zone(Model.FooterQuadThird)
                </div>
            }
            @if (Model.FooterQuadFourth != null)
            {
                <div class="omega @(HasText(footerQuadClass) ? footerQuadClass == "split-1" || footerQuadClass == "split-2" || footerQuadClass == "split-3" || footerQuadClass == "split-4" ? "grid_24" : footerQuadClass == "split-12" || footerQuadClass == "split-13" || footerQuadClass == "split-14" || footerQuadClass == "split-23" || footerQuadClass == "split-24" || footerQuadClass == "split-34" ? "grid_12" : footerQuadClass == "split-123" || footerQuadClass == "split-124" || footerQuadClass == "split-134" || footerQuadClass == "split-234" ? "grid_8" : "grid_6" : "")">
                    @Zone(Model.FooterQuadFourth)
                </div>
            }
        </div>
        <div class="clear"></div>

    }
    @if (Model.Footer != null)
    {
        <div class="container_24">

            @Zone(Model.Footer)

        </div>
        <div class="clear"></div>
        
    }
    @if (Model.FooterMenu != null)
    {
        <div class="footer-menu">
            <div class="container_24">
                @Zone(Model.FooterMenu)
            </div>
        </div>
        <div class="clear"></div>
        
    }
</footer>
@if (Model.Hidden != null)
{
    @Zone(Model.Hidden) 
}
